{"version":3,"file":"static/js/126.67d75e5e.chunk.js","mappings":"0RAaMA,EAAS,WACX,OAA0BC,EAAAA,EAAAA,UAAS,IAAG,eAA/BC,EAAK,KAAEC,EAAQ,KACdC,GAAgBC,EAAAA,EAAAA,KAAhBD,YACFE,GAAeC,EAAAA,EAAAA,IAAYC,EAAAA,IAC3BC,GAAYF,EAAAA,EAAAA,IAAYG,EAAAA,IACtBC,GAAoBC,EAAAA,EAAAA,MAApBD,gBAEFE,GAAaC,EAAAA,EAAAA,cACf,WACIX,EAAS,IACTC,EAAY,KAChB,GAEA,CAACF,IAGCa,GAAgBD,EAAAA,EAAAA,cAClB,SAACE,GACQC,MAAMD,EAAGE,OAAOhB,QACjBC,EAASa,EAAGE,OAAOhB,MAE3B,GAEA,CAACA,IAuBL,OApBAiB,EAAAA,EAAAA,YAAU,WACN,IAAMC,GAAiBlB,EACnBO,EAAUY,SAASD,GACnBhB,EAAYgB,IAEZP,IACAO,GACIT,EAAgB,gBAAD,OACKS,EAAa,6BAAqBX,EAAU,GAAE,eAAOA,EAAUa,IAC1E,GACJ,2BACD,CACIC,QAAS,YAM7B,GAAG,CAACrB,IAECI,GAGD,UAACkB,EAAA,EAAK,CAACC,UAAU,MAAMC,QAAS,EAAGC,eAAe,aAAaC,WAAW,SAAQ,WAC9E,SAACC,EAAA,EAAS,CACNC,GAAG,iBACHC,UAAWzB,EACXJ,MAAOA,EACP8B,SAAUjB,EACVkB,MAAM,WACNV,QAAQ,cAEZ,SAACW,EAAA,EAAM,CAACH,UAAW7B,EAAOiC,QAAStB,EAAW,UAC1C,SAAC,IAAS,SAbI,IAiB9B,EACA,EAAeuB,EAAAA,KAAWpC,G,4BC/DpBqC,EAAc,CAChBC,MAAO,SA0CX,EAvCmB,WACf,OAA2CjC,EAAAA,EAAAA,KAAnCkC,EAAY,EAAZA,aAAcC,EAAgB,EAAhBA,iBAChBC,GAA0BlC,EAAAA,EAAAA,IAAYmC,EAAAA,IACtCC,GAAsBpC,EAAAA,EAAAA,IAAYqC,EAAAA,IAClCC,GAAwBtC,EAAAA,EAAAA,IAAYuC,EAAAA,GAAsBC,EAAAA,IAC1DC,GAAWC,EAAAA,EAAAA,MAEXC,GAAuBpC,EAAAA,EAAAA,cAAY,WACrC0B,IACA,IAAMW,GAAcC,EAAAA,EAAAA,IAAiBP,EAAwB,GAC7DM,GAAeH,EAASG,EAE5B,GAAG,CAACN,IAEEQ,GAAmBvC,EAAAA,EAAAA,cAAY,WACjCyB,IACA,IAAMY,GAAcC,EAAAA,EAAAA,IAAiBP,EAAwB,GAC7DM,GAAeH,EAASG,EAG5B,GAAG,CAACN,IAEJ,OACI,UAACrB,EAAA,EAAK,CAACC,UAAU,MAAMC,QAAS,EAAGC,eAAe,SAASC,WAAW,SAAQ,WAC1E,SAACM,EAAA,EAAM,CACHX,QAAQ,YACRQ,UAAWU,EACXa,GAAIjB,EACJF,QAASe,EAAqB,UAE9B,SAACK,EAAA,EAAa,OAElB,SAACrB,EAAA,EAAM,CAACX,QAAQ,YAAYQ,UAAWY,EAAqBW,GAAIjB,EAAaF,QAASkB,EAAiB,UACnG,SAACG,EAAA,EAAgB,QAIjC,ECjDMC,EAAe,WACjB,OACI,iCACI,SAAC,EAAM,KACP,SAAC,KAAM,KACP,SAAC,EAAU,MAGvB,EACA,EAAerB,EAAAA,KAAWqB,E,yFCJ1B,EAN0B,WACtB,IAAMC,GAAWC,EAAAA,EAAAA,MAEjB,OAAOC,EAAAA,EAAAA,IAAmBC,EAAgBH,EAC9C,C","sources":["components/Filter.tsx","components/Navigation.tsx","components/ColorsLayout.tsx","hooks/useDispatchAction.ts"],"sourcesContent":["import Button from \"@mui/material/Button\";\r\nimport Stack from \"@mui/material/Stack\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport ClearIcon from \"@mui/icons-material/ClearOutlined\";\r\nimport { useCallback, useEffect, useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useSnackbar } from \"notistack\";\r\n\r\nimport useDispatchAction from \"../hooks/useDispatchAction\";\r\n\r\nimport { areColorsNotEmpty, getAllColorsIds } from \"reduxware/selectors\";\r\nimport React from \"react\";\r\n\r\nconst Filter = () => {\r\n    const [value, setValue] = useState(\"\");\r\n    const { setFilterId } = useDispatchAction();\r\n    const colorsLoaded = useSelector(areColorsNotEmpty);\r\n    const allColors = useSelector(getAllColorsIds);\r\n    const { enqueueSnackbar } = useSnackbar();\r\n\r\n    const clearInput = useCallback(\r\n        () => {\r\n            setValue(\"\");\r\n            setFilterId(null as unknown as number);\r\n        },\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n        [value]\r\n    );\r\n\r\n    const changeHandler = useCallback(\r\n        (ev: { target: { value: unknown | number } }) => {\r\n            if (!isNaN(ev.target.value as unknown as number)) {\r\n                setValue(ev.target.value as string);\r\n            }\r\n        },\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n        [value]\r\n    );\r\n\r\n    useEffect(() => {\r\n        const valueAsNumber = +value;\r\n        if (allColors.includes(valueAsNumber)) {\r\n            setFilterId(valueAsNumber);\r\n        } else {\r\n            clearInput();\r\n            valueAsNumber &&\r\n                enqueueSnackbar(\r\n                    `Requested Id ${valueAsNumber} is out of scope  ${allColors[0]} -  ${allColors.at(\r\n                        -1\r\n                    )}  . Try with another Id`,\r\n                    {\r\n                        variant: \"warning\",\r\n                    }\r\n                );\r\n        }\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [value]);\r\n\r\n    if (!colorsLoaded) return null;\r\n\r\n    return (\r\n        <Stack direction=\"row\" spacing={2} justifyContent=\"flex-start\" alignItems=\"center\">\r\n            <TextField\r\n                id=\"standard-basic\"\r\n                disabled={!colorsLoaded}\r\n                value={value}\r\n                onChange={changeHandler}\r\n                label=\"Wpisz Id\"\r\n                variant=\"standard\"\r\n            />\r\n            <Button disabled={!value} onClick={clearInput}>\r\n                <ClearIcon />\r\n            </Button>\r\n        </Stack>\r\n    );\r\n};\r\nexport default React.memo(Filter);\r\n","import Stack from \"@mui/material/Stack\";\r\nimport Button from \"@mui/material/Button\";\r\nimport ArrowBackIcon from \"@mui/icons-material/ArrowBack\";\r\nimport ArrowForwardIcon from \"@mui/icons-material/ArrowForward\";\r\n\r\nimport { useCallback } from \"react\";\r\nimport { shallowEqual, useSelector } from \"react-redux\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nimport useDispatchAction from \"hooks/useDispatchAction\";\r\n\r\nimport { numberToPathname } from \"helpers\";\r\nimport { getIsPreviousButtonVisible, getIsNextButtonVisible, getCurrentPageNumber } from \"reduxware/selectors\";\r\n\r\nconst buttonStyle = {\r\n    width: \"150px\",\r\n};\r\n\r\nconst Navigation = () => {\r\n    const { showNextPage, showPreviousPage } = useDispatchAction();\r\n    const isPreviousButtonVisible = useSelector(getIsPreviousButtonVisible);\r\n    const isNextButtonVisible = useSelector(getIsNextButtonVisible);\r\n    const currentDataPageNumber = useSelector(getCurrentPageNumber, shallowEqual);\r\n    const navigate = useNavigate();\r\n\r\n    const previousClickHandler = useCallback(() => {\r\n        showPreviousPage();\r\n        const newPathname = numberToPathname(currentDataPageNumber - 1);\r\n        newPathname && navigate(newPathname);\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [currentDataPageNumber]);\r\n\r\n    const nextClickHandler = useCallback(() => {\r\n        showNextPage();\r\n        const newPathname = numberToPathname(currentDataPageNumber + 1);\r\n        newPathname && navigate(newPathname);\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [currentDataPageNumber]);\r\n\r\n    return (\r\n        <Stack direction=\"row\" spacing={2} justifyContent=\"center\" alignItems=\"center\">\r\n            <Button\r\n                variant=\"contained\"\r\n                disabled={!isPreviousButtonVisible}\r\n                sx={buttonStyle}\r\n                onClick={previousClickHandler}\r\n            >\r\n                <ArrowBackIcon />\r\n            </Button>\r\n            <Button variant=\"contained\" disabled={!isNextButtonVisible} sx={buttonStyle} onClick={nextClickHandler}>\r\n                <ArrowForwardIcon />\r\n            </Button>\r\n        </Stack>\r\n    );\r\n};\r\n\r\nexport default Navigation;\r\n","import React from \"react\";\r\nimport { Outlet } from \"react-router-dom\";\r\n\r\nimport Filter from \"./Filter\";\r\nimport Navigation from \"./Navigation\";\r\n\r\nconst ColorsLayout = () => {\r\n    return (\r\n        <>\r\n            <Filter />\r\n            <Outlet />\r\n            <Navigation />\r\n        </>\r\n    );\r\n};\r\nexport default React.memo(ColorsLayout);\r\n","import { useDispatch } from \"react-redux\";\r\nimport { bindActionCreators } from \"redux\";\r\n\r\nimport { actionCreators } from \"reduxware\";\r\n\r\nconst useDispatchAction = () => {\r\n    const dispatch = useDispatch();\r\n\r\n    return bindActionCreators(actionCreators, dispatch);\r\n};\r\n\r\nexport default useDispatchAction;\r\n"],"names":["Filter","useState","value","setValue","setFilterId","useDispatchAction","colorsLoaded","useSelector","areColorsNotEmpty","allColors","getAllColorsIds","enqueueSnackbar","useSnackbar","clearInput","useCallback","changeHandler","ev","isNaN","target","useEffect","valueAsNumber","includes","at","variant","Stack","direction","spacing","justifyContent","alignItems","TextField","id","disabled","onChange","label","Button","onClick","React","buttonStyle","width","showNextPage","showPreviousPage","isPreviousButtonVisible","getIsPreviousButtonVisible","isNextButtonVisible","getIsNextButtonVisible","currentDataPageNumber","getCurrentPageNumber","shallowEqual","navigate","useNavigate","previousClickHandler","newPathname","numberToPathname","nextClickHandler","sx","ArrowBack","ArrowForward","ColorsLayout","dispatch","useDispatch","bindActionCreators","actionCreators"],"sourceRoot":""}